SQL Queries:--

SELECT - extracts data from a database
UPDATE - updates data in a database
DELETE - deletes data from a database
INSERT INTO - inserts new data into a database
CREATE DATABASE - creates a new database
ALTER DATABASE - modifies a database
CREATE TABLE - creates a new table
ALTER TABLE - modifies a table
DROP TABLE - deletes a table
CREATE INDEX - creates an index (search key)
DROP INDEX - deletes an index

**The SQL INSERT INTO Statement:
~The INSERT INTO statement is used to insert new records in a table.
#INSERT INTO Syntax: It is possible to write the INSERT INTO statement in two ways:

1. Specify both the column names and the values to be inserted:
-->INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...);

2. If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. 
However, make sure the order of the values is in the same order as the columns in the table. Here, the INSERT INTO syntax would be as follows:
-->INSERT INTO table_name
VALUES (value1, value2, value3, ...);

**The SQL UPDATE Statement:
~The UPDATE statement is used to modify the existing records in a table.
#UPDATE Syntax:--> UPDATE table_name SET column1 = value1, column2 = value2, ...WHERE condition;

**The SQL DELETE Statement:
~The DELETE statement is used to delete existing records in a table.
#DELETE Syntax:-->DELETE FROM table_name WHERE condition;

**SQL Create Constraints:
~Constraints can be specified when the table is created with the CREATE TABLE statement, or after the table is created with the ALTER TABLE statement.
#Syntax:--> CREATE TABLE table_name (column1 datatype constraint,
    				     column2 datatype constraint,
   				     column3 datatype constraint,
 				     ....
				    );
**SQL Constraints:
~SQL constraints are used to specify rules for the data in a table.
~Constraints are used to limit the type of data that can go into a table. This ensures the accuracy and reliability of the data in the table. 
~If there is any violation between the constraint and the data action, the action is aborted.
~Constraints can be column level or table level. Column level constraints apply to a column, and table level constraints apply to the whole table.

*The following constraints are commonly used in SQL:
1)NOT NULL - Ensures that a column cannot have a NULL value
2)UNIQUE - Ensures that all values in a column are different
3)PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
4)FOREIGN KEY - Prevents actions that would destroy links between tables
5)CHECK - Ensures that the values in a column satisfies a specific condition
6)DEFAULT - Sets a default value for a column if no value is specified
7)CREATE INDEX - Used to create and retrieve data from the database very quickly

**SQL NOT NULL Constraint:
~By default, a column can hold NULL values.
~The NOT NULL constraint enforces a column to NOT accept NULL values.
~This enforces a field to always contain a value, which means that you cannot insert a new record, or update a record without adding a value to this field.

**SQL UNIQUE Constraint:
~The UNIQUE constraint ensures that all values in a column are different.
~Both the UNIQUE and PRIMARY KEY constraints provide a guarantee for uniqueness for a column or set of columns.
~A PRIMARY KEY constraint automatically has a UNIQUE constraint.
~However, you can have many UNIQUE constraints per table, but only one PRIMARY KEY constraint per table.

**SQL PRIMARY KEY Constraint:
~The PRIMARY KEY constraint uniquely identifies each record in a table.
~Primary keys must contain UNIQUE values, and cannot contain NULL values.
~A table can have only ONE primary key; and in the table, this primary key can consist of single or multiple columns (fields).

**SQL FOREIGN KEY Constraint:
~The FOREIGN KEY constraint is used to prevent actions that would destroy links between tables.
~A FOREIGN KEY is a field (or collection of fields) in one table, that refers to the PRIMARY KEY in another table.
~The table with the foreign key is called the child table, and the table with the primary key is called the referenced or parent table.

**

**The SQL SELECT Statement:
~The SELECT statement is used to select data from a database.
~The data returned is stored in a result table, called the result-set.
#SELECT Syntax:--> SELECT column1, column2,...FROM table_name;
#If you want to select all the fields available in the table,then syntax is :--> SELECT * FROM table_name;

**The SQL SELECT DISTINCT Statement:
~The SELECT DISTINCT statement is used to return only distinct (different) values.
~Inside a table, a column often contains many duplicate values; and sometimes you only want to list the different (distinct) values.
#SELECT DISTINCT Syntax:-->SELECT DISTINCT column1, column2,...FROM table_name;

**The SQL WHERE Clause:
~The WHERE clause is used to filter records.
~It is used to extract only those records that fulfill a specified condition.
~The WHERE clause is not only used in SELECT statements, it is also used in UPDATE, DELETE, etc.!
#WHERE Syntax:--> SELECT column1, column2,...FROM table_name WHERE condition;

**The SQL AND, OR and NOT Operators:
~The WHERE clause can be combined with AND, OR, and NOT operators.
~The AND and OR operators are used to filter records based on more than one condition:
1)The AND operator displays a record if all the conditions separated by AND are TRUE.
2)The OR operator displays a record if any of the conditions separated by OR is TRUE.
3)The NOT operator displays a record if the condition(s) is NOT TRUE.

#AND Syntax:--> SELECT column1, column2, ...FROM table_name WHERE condition1 AND condition2 AND condition3 ...;
#OR Syntax:--> SELECT column1, column2, ...FROM table_name WHERE condition1 OR condition2 OR condition3 ...;
#NOT Syntax:--> SELECT column1, column2, ...FROM table_name WHERE NOT condition..;

**The SQL ORDER BY Keyword:
~The ORDER BY keyword is used to sort the result-set in ascending or descending order.
~The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.
#ORDER BY Syntax:--> SELECT column1, column2, ...FROM table_name ORDER BY column1, column2, ... ASC|DESC;

**The SQL Aggregate Functions:

~The MIN() function returns the smallest value of the selected column.
#MIN() Syntax:--> SELECT MIN(column_name) FROM table_name WHERE condition;

~The MAX() function returns the largest value of the selected column.
#MAX() Syntax:--> SELECT MAX(column_name) FROM table_name WHERE condition;

~The COUNT() function returns the number of rows that matches a specified criterion.
#COUNT() Syntax:--> SELECT COUNT(column_name) FROM table_name WHERE condition;

~The AVG() function returns the average value of a numeric column. 
#AVG() Syntax:--> SELECT AVG(column_name)FROM table_name WHERE condition;

~The SUM() function returns the total sum of a numeric column. 
#SUM() Syntax:--> SELECT SUM(column_name) FROM table_name WHERE condition;

**The SQL LIKE Operator:
~The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.
~There are two wildcards often used in conjunction with the LIKE operator:
1)The percent sign (%) represents zero, one, or multiple characters
2)The underscore sign (_) represents one, single character
~The percent sign and the underscore can also be used in combinations!

#LIKE Syntax:--> SELECT column1, column2, ...FROM table_name WHERE columnN LIKE pattern;

**The SQL IN Operator:
~The IN operator allows you to specify multiple values in a WHERE clause.
~The IN operator is a shorthand for multiple OR conditions.
#IN Syntax:--> SELECT column_name(s) FROM table_name WHERE column_name IN (value1, value2, ...);

**The SQL BETWEEN Operator1;
~The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.
~The BETWEEN operator is inclusive: begin and end values are included. 
#BETWEEN Syntax:--> SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2;

**SQL Aliases:
~SQL aliases are used to give a table, or a column in a table, a temporary name.
~Aliases are often used to make column names more readable.
~An alias only exists for the duration of that query.
~An alias is created with the AS keyword.
#Alias Column Syntax:--> SELECT column_name AS alias_name FROM table_name;

**SQL JOIN:
~A JOIN clause is used to combine rows from two or more tables, based on a related column between them.
~The different types of the JOINs in SQL:
1)INNER JOIN: Returns records that have matching values in both tables
#INNER JOIN Syntax:--> SELECT column_name(s) FROM table1 INNER JOIN table2 ON table1.column_name = table2.column_name;

2)LEFT JOIN: Returns all records from the left table, and the matched records from the right table
#LEFT JOIN Syntax:--> SELECT column_name(s) FROM table1 LEFT JOIN table2 ON table1.column_name = table2.column_name;

3)RIGHT JOIN: Returns all records from the right table, and the matched records from the left table
#RIGHT JOIN Syntax:--> SELECT column_name(s) FROM table1 RIGHT JOIN table2 ON table1.column_name = table2.column_name;

4)FULL JOIN: Returns all records when there is a match in either left or right table
#FULL JOIN Syntax:--> SELECT column_name(s) FROM table1 FULL JOIN table2 ON table1.column_name = table2.column_name WHERE condition;

**The SQL UNION Operator:
~The UNION operator is used to combine the result-set of two or more SELECT statements.
~Every SELECT statement within UNION must have the same number of columns
~The columns must also have similar data types
~The columns in every SELECT statement must also be in the same order
#UNION Syntax:--> SELECT column_name(s) FROM table1 UNION SELECT column_name(s) FROM table2;

**The SQL GROUP BY Statement:
~The GROUP BY statement groups rows that have the same values into summary rows, like "find the number of customers in each country".
~The GROUP BY statement is often used with aggregate functions (COUNT(), MAX(), MIN(), SUM(), AVG()) to group the result-set by one or more columns.
#GROUP BY Syntax:--> SELECT column_name(s) FROM table_name WHERE condition GROUP BY column_name(s) ORDER BY column_name(s);

**The SQL HAVING Clause:
~The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions.
#HAVING Syntax:--> SELECT column_name(s) FROM table_name WHERE condition GROUP BY column_name(s) HAVING condition ORDER BY column_name(s);

**The SQL EXISTS Operator:
~The EXISTS operator is used to test for the existence of any record in a subquery.
~The EXISTS operator returns TRUE if the subquery returns one or more records.
#EXISTS Syntax:--> SELECT column_name(s) FROM table_name WHERE EXISTS (SELECT column_name FROM table_name WHERE condition);


